"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([[9838],{47098:(e,n,s)=>{s.d(n,{Z:()=>r});var l=s(67294),a=s(85893);function r(e){let{children:n,initSlides:s,width:r=null,height:i=null}=e;return(0,l.useEffect)((()=>{s()})),(0,a.jsx)("div",{className:"reveal reveal-viewport",style:{width:r??"100vw",height:i??"100vh"},children:(0,a.jsx)("div",{className:"slides",children:n})})}},63942:(e,n,s)=>{s.d(n,{O:()=>l});const l=()=>{const e=s(42199),n=s(87251),l=s(60977),a=s(12489);new(s(29197))({plugins:[e,n,l,a]}).initialize({hash:!0})}},71075:(e,n,s)=>{s.r(n),s.d(n,{default:()=>i});var l=s(47098),a=s(63942),r=s(85893);function i(){return(0,r.jsxs)(l.Z,{initSlides:a.O,children:[(0,r.jsx)("section",{children:(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Agenda"}),(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{className:"fragment",children:"Generics"}),(0,r.jsx)("li",{className:"fragment",children:"Maps"})]})]})}),(0,r.jsxs)("section",{children:[(0,r.jsx)("section",{children:(0,r.jsx)("h2",{children:"Generics"})}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Generische Typen"}),(0,r.jsx)("p",{className:"fragment",children:"In Java k\xf6nnen Klassen und Interfaces generisch sein."}),(0,r.jsx)("p",{className:"fragment",children:"Generisch hei\xdft, dass Funktionalit\xe4t unabh\xe4ngig von einem Typ implementiert werden k\xf6nnen."})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Beispiele Generische Klassen"}),(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{className:"fragment",children:"ArrayList"}),(0,r.jsx)("li",{className:"fragment",children:"Optional"})]}),(0,r.jsx)("p",{className:"fragment",children:"Beide Klassen stellen immer die gleiche Funktionalit\xe4t bereit, egal welchen Typ wir verwenden."})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Beispiele ArrayList"}),(0,r.jsx)("p",{className:"fragment",children:"Egal ob wir Objekte vom Typ Human, Dog, String oder Integer in einer ArrayList abspeichern, wir haben immer die gleichen Methoden zur verf\xfcgung."}),(0,r.jsx)("p",{className:"fragment",children:"add, remove, size etc."})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Beispiel Optional"}),(0,r.jsx)("p",{className:"fragment",children:"Egal ob wir Objekte vom Typ Human, Dog, String oder Integer mit Optional.of, Optional.ofNullable oder Optional.empty erstellen, wir haben immer die gleichen Methoden zur verf\xfcgung."}),(0,r.jsx)("p",{className:"fragment",children:"isPresent, isEmpty, get"})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Verwendung Generics I"}),(0,r.jsxs)("p",{className:"fragment",children:["Will man in seiner Anwendung eine Liste von Menschen abspeichern ist der ",(0,r.jsx)("b",{children:"spezifische"})," Typ bekannt."]}),(0,r.jsxs)("p",{className:"fragment",children:["Nach dem Klassennamen wird innerhalb von spitzen Klammern, der"," ",(0,r.jsx)("b",{children:"spezifische"})," Typ angegeben."]})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Verwendung Generics II"}),(0,r.jsx)("pre",{className:"fragment",children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Main {\n  public static void main(String[] args) {\n    ArrayList&lt;Human&gt; humans = new ArrayList&lt;&gt;();\n    Optional&ltHuman&gt; human = Optional.empty();\n  }\n}\n"}})})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Implementierung Generics I"}),(0,r.jsx)("p",{className:"fragment",children:"Um eine generische Klasse zu erstellen, wird nach dem Klassennamen in spitzen Klammern der Platzhalter f\xfcr einen Typ angegeben."}),(0,r.jsx)("pre",{className:"fragment",children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Team&lt;T&gt; {\n  // implementierung der Klasse\n}\n"}})})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Typplatzhalter I"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Team&lt;T&gt; {\n  // implementierung der Klasse\n}\n"}})}),(0,r.jsx)("pre",{className:"fragment",children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Team&lt;A&gt; {\n  // implementierung der Klasse\n}\n"}})}),(0,r.jsx)("pre",{className:"fragment",children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Team&lt;HANS&gt; {\n  // implementierung der Klasse\n}\n"}})}),(0,r.jsx)("pre",{className:"fragment",children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Team&lt;BLIBLABLUBB&gt; {\n  // implementierung der Klasse\n}\n"}})}),(0,r.jsx)("p",{className:"fragment",children:"Der Namen des Platzhalters kann frei gew\xe4hlt werden."})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Typplatzhalter II"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Team&lt;T&gt; {\n  // implementierung der Klasse\n}\n"}})}),(0,r.jsx)("pre",{className:"fragment",children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Team&lt;T,U&gt; {\n  // implementierung der Klasse\n}\n"}})}),(0,r.jsx)("pre",{className:"fragment",children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Team&lt;T, U, V&gt; {\n  // implementierung der Klasse\n}\n"}})}),(0,r.jsx)("p",{className:"fragment",children:"Es k\xf6nnen mehrere Platzhalter kommagetrennt angegeben werden."})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Verwenden von Typplatzhaltern I"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Team&lt;T&gt; {\n  private String teamName;\n  private ArrayList&lt;T&gt; teamMembers = new ArrayList&lt;&gt;();\n  \n  public String teamName() {\n    return this.teamName;\n  }\n  \n  public void addMember(T member) {\n    this.teamMembers.add(member);\n  }\n}\n"}})})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Verwenden von Typplatzhaltern II"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:'public class Main {\n  public static void main(String[] args) {\n    Team&lt;FootballPlayer&gt; scfreiburg = new Team&lt;&gt;();\n    Team&lt;HockeyPlayer&gt; wildwings  = new Team&lt;&gt;();\n    \n    scfreiburg.addMember(new FootballPlayer("Steffen");\n    scfreiburg.addMember(new HockeyPlayer("Mirco"); // fails\n    wildwings.addMember(new HockeyPlayer("Mirco");\n }\n}\n'}})})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Demo"}),(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{className:"fragment",children:"Football- und Hockeyteam"}),(0,r.jsx)("li",{className:"fragment",children:"Generische Team Klasse"}),(0,r.jsx)("li",{className:"fragment",children:"Spieler eines Teams ausgeben"})]})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Einschr\xe4nken von Typplatzhaltern I"}),(0,r.jsx)("p",{children:"Um noch mehr Funktionalit\xe4ten in eine generische Klasse auszulagern ist es notwendig den Typ einzuschr\xe4nken."})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Einschr\xe4nken von Typplatzhaltern II"}),(0,r.jsxs)("p",{children:["Mit ",(0,r.jsx)("b",{children:"extends"})," und ",(0,r.jsx)("b",{children:"super"})," k\xf6nnen die m\xf6glichen Typen eingeschr\xe4nkt werden."]})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Einschr\xe4nken von Typplatzhaltern III"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Team&lt;T extends Player&gt; {\n  // Player und Subtypen von Player erlaubt\n}\n"}})}),(0,r.jsx)("pre",{className:"fragment",children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Team&lt;T super Player&gt; {\n  // Player und Supertypen von Player erlaubt \n}\n"}})})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Einschr\xe4nken von Typplatzhaltern IV"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Player {}\npublic class BaseballPlayer extends Player {}\npublic class FootballPlayer extends Player {}\npublic class ExtremeFootballPlayer extends FootballPlayer {}\n"}})}),(0,r.jsx)("pre",{className:"fragment",children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Team&lt;T extends Player&gt; {} //PBFE erlaubt\npublic class Team&lt;T extends FootballPlayer&gt; {} //FE erlaubt\npublic class Team&lt;T super Player&gt; {} // P erlaubt\npublic class Team&lt;T super FootballPlayer&gt; {} //PF erlaubt"}})})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Demo"}),(0,r.jsx)("ul",{children:(0,r.jsx)("li",{className:"fragment",children:"Spieler eines Generischen Teams ausgeben"})})]})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("section",{children:(0,r.jsx)("h2",{children:"Maps"})}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Maps"}),(0,r.jsx)("p",{children:"Wir kennen das Array oder die ArrayList als Datenstruktur. Hierbei greifen wir \xfcber den Index auf Elemente zu."}),(0,r.jsx)("p",{className:"fragment",children:"Mithilfe einer HashMap lassen sich Daten in Form von Schl\xfcssel-Wert-Paaren effizient speichern und abrufen."})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h4",{children:"Beispiel Schl\xfcssel-Wert-Paare"}),(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{className:"fragment",children:"Studentendaten -> MatrikelNummer, Student"}),(0,r.jsx)("li",{className:"fragment",children:"Produktinventar -> Produkt, Anzahl"}),(0,r.jsx)("li",{className:"fragment",children:"StadtInfos -> Stadtname, CityInfo"}),(0,r.jsx)("li",{className:"fragment",children:"Hauptst\xe4dte -> Land, Hauptstadt"})]})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Erzeugen einer HashMap"}),(0,r.jsx)("pre",{className:"fragment",children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:'public class Main {\n  public static void main(String[] args) {\n    Student steffen = new Student("Steffen");\n    HashMap&lt;Integer, Student&gt; students = new HashMap&lt;&gt;();\n    students.put(4545, steffen); // add value to map\n    students.get(4545); // get value from map\n    students.remove(4545); // remove value from map\n    students.clear(); // clear map\n    students.size(); // number of items in map\n    students.containsKey(4545); // check if key exists\n    students.containsValue(steffen); // check if value exists\n    students.keySet(); // get all keys as Set\n    students.entrySet(); // get all entries as Set-Entry\n    students.values(); // get all entries as Collection\n  }\n}\n'}})})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Demo"}),(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{className:"fragment",children:"Studentendaten"}),(0,r.jsx)("li",{className:"fragment",children:"Daten liegen unsortiert vor"}),(0,r.jsx)("li",{className:"fragment",children:"Objekte als Schl\xfcssel"})]})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Maps"}),(0,r.jsx)("p",{children:"Daten liegen unsortiert vor."}),(0,r.jsx)("p",{className:"fragment",children:"Maps mit Objekten als Schl\xfcssel m\xfcssen je nach Anwendungsfall richtig implementiert werden."}),(0,r.jsx)("p",{className:"fragment",children:"equals - Methode muss zus\xe4tzlich zu hashCode implementiert werden"}),(0,r.jsx)("p",{className:"fragment",children:"performance outlook"})]}),(0,r.jsx)("section",{children:(0,r.jsx)("h2",{children:"Frag jetzt!"})})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Rest of the Day"}),(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{className:"fragment",children:"Generics"}),(0,r.jsx)("li",{className:"fragment",children:"Maps"})]})]})]})}}}]);