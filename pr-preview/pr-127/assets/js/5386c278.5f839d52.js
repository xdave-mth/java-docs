"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([[3083],{75265:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>o});var r=i(85893),a=i(11151);const s={title:"Steffen",description:"",sidebar_position:30,tags:[]},l=void 0,t={id:"additional-material/steffen",title:"Steffen",description:"",source:"@site/docs/additional-material/steffen.md",sourceDirName:"additional-material",slug:"/additional-material/steffen",permalink:"/java-docs/pr-preview/pr-127/additional-material/steffen",draft:!1,unlisted:!1,editUrl:"https://github.com/jappuccini/java-docs/tree/main/docs/additional-material/steffen.md",tags:[],version:"current",sidebarPosition:30,frontMatter:{title:"Steffen",description:"",sidebar_position:30,tags:[]},sidebar:"additionalMaterialSidebar",previous:{title:"Klausurergebnisse",permalink:"/java-docs/pr-preview/pr-127/additional-material/daniel-java2/exam-results"}},d={},o=[{value:"Java I",id:"java-i",level:2},{value:"Java II",id:"java-ii",level:2},{value:"Demos",id:"demos",level:2},{value:"Klausurvorbereitung Java II",id:"klausurvorbereitung-java-ii",level:2},{value:"Aufgabe Optionals",id:"aufgabe-optionals",level:2},{value:"Klassendiagramm",id:"klassendiagramm",level:3},{value:"Aufgabe Lambdafunktionen",id:"aufgabe-lambdafunktionen",level:2},{value:"Klassendiagramm",id:"klassendiagramm-1",level:3},{value:"Aufgabe Streams",id:"aufgabe-streams",level:2},{value:"Klassendiagramm",id:"klassendiagramm-2",level:3},{value:"Hinweise zur Klasse PhoneStore",id:"hinweise-zur-klasse-phonestore",level:2},{value:"Klausurvorbereitung Java I",id:"klausurvorbereitung-java-i",level:2},{value:"08.03.2023",id:"08032023",level:3},{value:"14.03.2023",id:"14032023",level:3},{value:"Aufgabe Array",id:"aufgabe-array",level:4},{value:"Aufgabe Exception",id:"aufgabe-exception",level:4},{value:"21.03.2023",id:"21032023",level:3},{value:"Aufgabe abstrakte Klasse, Enum",id:"aufgabe-abstrakte-klasse-enum",level:4},{value:"Aufgabe Comparator",id:"aufgabe-comparator",level:4}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"java-i",children:"Java I"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/slides/steffen/intro",children:"Einleitung 18.01."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/slides/steffen/datatypes-and-dataobjects",children:"Datentypen und Datenobjekte 18.01."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/slides/steffen/methods-and-operators",children:"Methoden und Operatoren 19.01."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/slides/steffen/if-and-switch",children:"Kontrollstrukturen und Arrays 01.02."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/slides/steffen/math-random-scanner",children:"Math, Random und Scanner 02.02."})}),"\n",(0,r.jsx)(n.li,{children:"Kurztest 08.02."}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/slides/steffen/classes-and-objects",children:"Klassen und Objekte 08.02."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/slides/steffen/constructor-and-static",children:"Konstruktor und static 09.02."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/slides/steffen/class-diagram-java-api-enum",children:"Java API, Enum, Klassendiagramm, Aktivit\xe4tsdiagramm 15.02. & 16.02."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/slides/steffen/inheritance",children:"Vererbung 21.02. & 23.02."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/slides/steffen/polymorphy",children:"Polymorphie 21.02. & 23.02."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/slides/steffen/abstract-and-final",children:"Abstrakte und finale Klassen 21.02. & 23.02."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/slides/steffen/interfaces",children:"Interfaces 29.02."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/slides/steffen/exceptions",children:"Exceptions 01.02."})}),"\n",(0,r.jsx)(n.li,{children:"Klausurvorbereitung 07.03. & 08.03."}),"\n",(0,r.jsx)(n.li,{children:"Klausur 15.03."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"java-ii",children:"Java II"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/slides/steffen/recap",children:"Wiederholung und Klausurbesprechung 10.08.23"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/slides/steffen/lambda",children:"Innere Klassen und Lambda Funktionen 17.08.23"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/slides/steffen/records-optionals",children:"Records und Optionals 18.08.23"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/slides/steffen/generics-maps",children:"Generics und Maps 24.08.23"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/slides/steffen/stream-api",children:"Stream API 31.08.23 & 01.09.23"})}),"\n",(0,r.jsx)(n.li,{children:"Probeklausur 07.09.23"}),"\n",(0,r.jsx)(n.li,{children:"Probeklausur 14.09.23"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"demos",children:"Demos"}),"\n",(0,r.jsx)(n.p,{children:"Die Endergebnisse der Demos findet ihr in folgendem Branch:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git switch demos/steffen\n"})}),"\n",(0,r.jsx)(n.h2,{id:"klausurvorbereitung-java-ii",children:"Klausurvorbereitung Java II"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:i(37226).Z+"",children:"Cheatsheet Java II"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Altklausuren 2022 Q3 - Klausur Java 2 Aufgabe 3"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class PlanetQueries {\n\n    public static ArrayList<Planet> planets = Planet.getPlantes();\n\n    public static void a() {\n        PlanetQueries.planets.stream()\n          .filter(p -> p.moons() > 5)\n          .forEach(p -> {\n              System.out.println(p.name() + ": " + p.moons());\n          });\n    }\n\n    public static OptionalDouble b() {\n        return PlanetQueries.planets.stream()\n          .filter(p -> p.type() == Type.GAS_PLANET)\n          .mapToDouble(p -> p.diameter())\n          .average();\n    }\n\n    public static List<Planet> c() {\n        return PlanetQueries.planets.stream()\n          .sorted((p1, p2) -> Double.compare(p2.mass(), p1.mass()))\n          .toList();\n    }\n\n    public static boolean d() {\n        return PlanetQueries.planets.stream()\n          .allMatch(p -> p.moons() > 0);\n    }\n\n    public static void e() {\n        Map<Type, List<Planet>> planetsMap = PlanetQueries.planets.stream()\n          .collect(Collectors.groupingBy(p -> p.type()));\n        planetsMap.entrySet()\n          .stream()\n          .forEach(entry -> {\n            System.out.println(entry.getKey() + ":" + entry.getValue());\n          });\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Altklausuren 2022 Q3 - Probeklausur Java 2 Klausur Aufgabe 3"}),"\n",(0,r.jsx)(n.li,{children:"Altklausuren 2023 Q1 - Wiederholklausur 2 Java 2 Klausur Aufgabe 3"}),"\n",(0,r.jsx)(n.li,{children:"Altklausuren 2023 Q1 - Wiederholklausur Java 2 Klausur Aufgabe 3"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"aufgabe-optionals",children:"Aufgabe Optionals"}),"\n",(0,r.jsx)(n.h3,{id:"klassendiagramm",children:"Klassendiagramm"}),"\n",(0,r.jsx)(n.mermaid,{value:"classDiagram\n  class Car {\n    +name String\n    +brand String\n    +addition Optional~String~\n    +Car(name String, brand String)\n    +Car(name String, brand String, addition String)\n    +toString() String\n  }"}),"\n",(0,r.jsxs)(n.p,{children:["** Hinweise zu den Konstruktoren** ",(0,r.jsx)("br",{})," Die Konstruktoren sollen alle Attribute\ninitialisieren."]}),"\n",(0,r.jsxs)(n.p,{children:["** Hinweise zur Methode toString ** ",(0,r.jsx)("br",{})," Die Methode toString soll die\nAttribute brand, model und addition zur\xfcckgeben. Die Attribute sollen durch eine\nLeertaste getrennt sein. Falls addition keinen Wert besitz, soll dieser\nignoriert werden."]}),"\n",(0,r.jsx)(n.p,{children:'Erstelle eine ausf\xfchrbare Klasse in der ein Auto mit der Marke "Mercedes", dem\nModell "CLA45" und dem Zusatz "AMG" initialisiert wird. Gib das Auto in der\nKonsole aus. Entferne den Zusatz von dem Auto und gebe das Auto erneut in der\nKonsole aus.'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class Car {\n    public String name;\n    public String brand;\n    public Optional<String> addition;\n\n    public Car(String name, String brand) {\n        this.name = name;\n        this.brand = brand;\n        this.addition = Optional.empty();\n    }\n\n    public Car(String name, String brand, String addition) {\n        this.name = name;\n        this.brand = brand;\n        this.addition = Optional.ofNullable(addition);\n    }\n\n    public String toString() {\n        if (addition.isPresent()) {\n            return brand + " " + name + addition.get();\n        } else {\n            return brand + " " + name;\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class Main {\n    public static void main(String[] args) {\n        Car benz = new Car("CLA45", "Mercedes", "AMG");\n        System.out.println(benz.toString());\n        benz.addition = Optional.empty();\n        System.out.println(benz.toString());\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"aufgabe-lambdafunktionen",children:"Aufgabe Lambdafunktionen"}),"\n",(0,r.jsx)(n.h3,{id:"klassendiagramm-1",children:"Klassendiagramm"}),"\n",(0,r.jsx)(n.mermaid,{value:"classDiagram\n  Helper -- Animal\n  Data -- Animal\n  Task2 -- Animal\n  Task2 -- Data\n  Task2 -- Helper\n\n  class Helper {\n      +isNewBorn UNKNOWN$\n      +toOutput UNKNOWN$\n      +isHigherThan(size: int)$ Predicate~Student~\n  }\n\n  class Animal {\n      <<record>>\n      +firstName String\n      +lastName String\n      +size int\n  }\n\n  class Data {\n      +getAnimals()$ Stream~Animal~\n  }\n\n  class Task2 {\n      +main(args: String[])$ void\n  }"}),"\n",(0,r.jsxs)(n.p,{children:["** Hinweise zur Klasse Helper** ",(0,r.jsx)("br",{})," Im Klassendiagramm sind keine\nR\xfcckgabetypen f\xfcr die statischen Attribute angegeben. Gib f\xfcr jedes Attribut den\ngeeigneten Typ an."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Das Attribut ",(0,r.jsx)(n.strong,{children:"isNewBorn"})," soll eine Lambdafunktion enthalten die ermittelt,\nob ein Tier j\xfcnger als 1 Jahr alt ist."]}),"\n",(0,r.jsxs)(n.li,{children:["Das Attribut ",(0,r.jsx)(n.strong,{children:"toOutput"}),' soll eine Lambdafunktion enthalten, die ein Tier in\nfolgenden String konvertiert: "firstName lastName ist size Zentimeter gro\xdf."']}),"\n",(0,r.jsxs)(n.li,{children:["Die Methode ",(0,r.jsx)(n.strong,{children:"isHigherThan"})," soll eine Lambdafunktion zur\xfcckgeben, die\nabh\xe4ngig vom Parameter size \xfcberpr\xfcft, ob ein Tier gr\xf6\xdfer als die angegebene\nGr\xf6\xdfe ist."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Hinweise zur Klasse Data"})," ",(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Die Methode ",(0,r.jsx)(n.strong,{children:"getAnimals"})," soll einen Stream von einem einzelnen Tier mit den\nWerten deiner Wahl zur\xfcckgeben."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Hinweise zur Klasse Task2"})," ",(0,r.jsx)("br",{})," Verwende f\xfcr die nachfolgende Abfolge die\nMethoden der Klassen Data und Helper. Erzeuge einen Stream von Tieren und\nfiltere jene heraus, die Gr\xf6\xdfer als 50 Zentimeter sind. Gib anschlie\xdfend den\nvollen Namen und die Gr\xf6\xdfe der Tiere in der Konsole aus."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public record Animal(String firstName, String lastName, int age, int size) {}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class Data {\n    public static Stream<Animal> getAnimals() {\n        return Stream.of(new Animal("Steffen", "Merk", 28, 170));\n    }\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class Helper {\n    public static Predicate<Animal> isNewBorn = animal -> animal.age() < 1;\n    public static Function<Animal, String> toOutput = animal -> animal.firstName()\n            + " " + animal.lastName() + " ist " + animal.size() + " Zentimeter gro\xdf";\n\n    public static Predicate<Animal> isHigherThan(int size) {\n        return animal -> animal.size() > size;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class Task2 {\n    public static void main(String[] args) {\n        Data.getAnimals()\n                .filter(Helper.isHigherThan(50))\n                .map(Helper.toOutput)\n                .forEach(System.out::println);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"aufgabe-streams",children:"Aufgabe Streams"}),"\n",(0,r.jsx)(n.h3,{id:"klassendiagramm-2",children:"Klassendiagramm"}),"\n",(0,r.jsx)(n.mermaid,{value:"classDiagram\n  direction LR\n\n  ConnectionType -- Phone\n  Phone -- Data\n  Phone -- Brand\n  Phone -- PhoneStore\n\n  class ConnectionType {\n    <<enummeration>>\n    TYPC\n    THUNDERBOLT\n    MICRO\n    +isModern() boolean\n  }\n\n  class Phone {\n    <<record>>\n    +brand Brand\n    +connectionType ConnectionType\n    +cameras int\n    +batterySize int\n    +cpuPower int\n    +price double\n  }\n\n  class Data {\n    +gePhones()$ ArrayList~Phone~\n  }\n\n  class Brand {\n    <<enummeration>>\n    APPLE\n    SAMSUNG\n    HUAWEI\n  }\n\n  class PhoneStore {\n    -phones ArrayList~Phone~\n    +PhoneStore(phones: ArrayList~Phone~)\n    +q1() Phone~Car~\n    +q2() OptionalDouble\n    +q3(maxPrice: double) List~Phone~\n    +q4() Map~String&sbquo; Phone~\n    +q5() Map~String&sbquo; List~Phone~~\n  }"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class PhoneStore {\n  private ArrayList<Phone> phones;\n\n  public PhoneStore(ArrayList<Phone> phones) {\n    this.phones = phones;\n  }\n\n  public List<Phone> q1() {\n    return phones.stream()\n        .filter(p -> p.brand() == Brand.HUAWEI)\n        .filter(p -> p.cameras() > 3)\n        .sorted((p1, p2) -> Integer.compare(p2.cpuPower(), p1.cpuPower()))\n        .limit(3)\n        .sorted((p1, p2) -> Double.compare(p2.price(), p1.price()))\n        .toList();\n  }\n\n  public OptionalDouble q2() {\n    return phones.stream()\n        .filter(p -> p.batterySize() > 2500)\n        .mapToInt(p -> p.cameras())\n        .average();\n  }\n\n  public List<Phone> q3(double maxPrice) {\n    return phones.stream()\n        .filter(p -> p.price() <= maxPrice)\n        .filter(p -> p.connectionType().isModern())\n        .filter(p -> p.cpuPower() < 2400)\n        .sorted((p1, p2) -> Double.compare(p1.price(), p2.price()))\n        .toList();\n  }\n\n  public Map<String, Phone> q4() {\n    return phones.stream()\n        .collect(Collectors.toMap(\n            p -> p.brand().name() + p.connectionType().name(),\n            p -> p));\n  }\n\n  public Map<ConnectionType, List<Phone>> q5() {\n    return phones.stream()\n        .collect(Collectors.groupingBy(p -> p.connectionType()));\n  }\n\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"hinweise-zur-klasse-phonestore",children:"Hinweise zur Klasse PhoneStore"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Der Konstruktor soll alle Attribute initialisieren."}),"\n",(0,r.jsxs)(n.li,{children:["Die Methode ",(0,r.jsx)(n.strong,{children:"q1"})," soll die drei Leistungsst\xe4rksten (CPU Power) Smart Phones\nder Marke Huawei, absteigend nach dem Preis zur\xfcckgeben, welche mehr als 3\nKameras haben."]}),"\n",(0,r.jsxs)(n.li,{children:["Die Methode ",(0,r.jsx)(n.strong,{children:"q2"})," soll die durchschnittliche Kameraanzahl aller Smart Phones\nzur\xfcckgeben, die einen Akku von 2500 oder mehr haben."]}),"\n",(0,r.jsxs)(n.li,{children:["Die Methode ",(0,r.jsx)(n.strong,{children:"q3"})," soll die Smart Phones aufsteigend nach Preis zur\xfcckgeben,\ndie den ",(0,r.jsx)(n.strong,{children:"maxPrice"})," nicht \xfcberschreiten, einen modernen Anschlusstyp haben\nund weniger als 2400 Leistung (CPU Power) haben."]}),"\n",(0,r.jsxs)(n.li,{children:["Die Methode ",(0,r.jsx)(n.strong,{children:"q4"})," soll eine Map zur\xfcckgeben. Der Schl\xfcssel soll aus dem\nMarkennamen und dem Anschlusstyp zusammengesetzt werden. Als Wert soll das\nAuto zur\xfcckgegeben werden."]}),"\n",(0,r.jsxs)(n.li,{children:["Die Methode ",(0,r.jsx)(n.strong,{children:"q5"})," soll eine Map zur\xfcckgeben, welche alle Smart Phones nach\nAnschlusstyp gruppiert."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"klausurvorbereitung-java-i",children:"Klausurvorbereitung Java I"}),"\n",(0,r.jsx)(n.h3,{id:"08032023",children:"08.03.2023"}),"\n",(0,r.jsx)(n.p,{children:"** Aufgaben in der Probeklausur 2202_Q4 **"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Aufgabe 1-a f\xfcr die Methode a"}),"\n",(0,r.jsx)(n.li,{children:"Aufgabe 1-b"}),"\n",(0,r.jsx)(n.li,{children:"Aufgabe 2"}),"\n",(0,r.jsx)(n.li,{children:"Aufgabe 5"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"14032023",children:"14.03.2023"}),"\n",(0,r.jsx)(n.h4,{id:"aufgabe-array",children:"Aufgabe Array"}),"\n",(0,r.jsx)(n.mermaid,{value:"classDiagram\n  class ExamTask {\n    +main(args: String[])$ void\n    +split(numbers: int[], index: int)$ void\n  }"}),"\n",(0,r.jsxs)(n.p,{children:["** Hinweise zur Methode split ** ",(0,r.jsx)("br",{})," Die Methode split soll ein Array vom Typ\nint so verarbeiten, dass ein neues Array erstellt wird, was alle Elemente des\neingehenden Arrays bis zum angegebenen Index enth\xe4lt. Das neu erstellte Array\nsoll anschlie\xdfend zur\xfcckgegeben werden. Verwende keine ArrayList! Bsp.: Der\nParameter numbers enth\xe4lt die Elemente 10, 8, 3, 22 & 1 der Parameter index ist\ngleich 2. Zur\xfcckgegeben werden soll ein neues Array, das die Elemente 10, 8 & 3\nenth\xe4lt."]}),"\n",(0,r.jsxs)(n.p,{children:["** Hinweise zur Methode main ** ",(0,r.jsx)("br",{})," In der Methode main soll ein Arrays\nerstellt werden, dass die Ganzzahlen 10, 8, 3, 22 & 1 enth\xe4lt. Erstelle mithilfe\nder Methode split ein neues Array, dass die ersten drei Elemente des ersten\nArrays enthalten soll. Gib mithilfe einer For-Schleife alle Elemente des neu\nerstellten Arrays aus."]}),"\n",(0,r.jsx)(n.h4,{id:"aufgabe-exception",children:"Aufgabe Exception"}),"\n",(0,r.jsx)(n.mermaid,{value:"classDiagram\n  direction LR\n\n  Barrel -- OverflowException\n\n  class Barrel {\n    -capacity int\n    -fluidLevel int\n    +Barrel(capacity: int)\n    +addFluid(value: int) void\n  }\n\n  class OverflowException {\n    <<Exception>>\n    -higherThanCapacity int &lcub; final &rcub;\n    +OverflowException(higherThanCapacity: int)\n    +getHigherThanCapacity() int\n  }"}),"\n",(0,r.jsx)(n.p,{children:"** Hinweise zur Klasse OverflowException **"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Der Konstruktor soll alle Attribute initialisieren."}),"\n",(0,r.jsxs)(n.li,{children:["Die Methode ",(0,r.jsx)(n.strong,{children:"getHigherThanCapacity"})," soll die zu viel hinzugef\xfcgte\nFl\xfcssigkeit zur\xfcckgeben."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"** Hinweise zur Klasse Barrel**"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Der Konstruktor soll alle Attribute initialisieren. Das Fass ist Anfangs immer\nleer."}),"\n",(0,r.jsxs)(n.li,{children:["Die Methode ",(0,r.jsx)(n.strong,{children:"addFluid"})," soll die OverflowException ausl\xf6sen, wenn die Summe\nder eingehenden Fl\xfcssigkeit und der im Fass befindenden Fl\xfcssigkeit die\nKapazit\xe4t \xfcberschreitet. \xdcbergebe der Ausnahme den Wert, um wieviel die\nmaximale Kapazit\xe4t \xfcberschritten wurde. Wenn die maximale Kapazit\xe4t nicht\n\xfcberschritten wird, soll die eingehende Fl\xfcssigkeit dem Fass hinzugef\xfcgt\nwerden"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["** Zusatz in ausf\xfchrbarer Klasse ** ",(0,r.jsx)("br",{})," Erstelle ein neues Fass, das die\nmaximale Kapazit\xe4t von 100 hat. Versuche anschlie\xdfend das Fass auf 101 zu f\xfcllen\nund fange die Ausnahme ab. Gib in der Konsole aus, um wieviel die maximale\nKapazit\xe4t \xfcberschritten wurde.",(0,r.jsx)("br",{})," ** Beispiel Konsolenausgabe: ** ",(0,r.jsx)("br",{}),' "Es\nw\xe4re um 1 zu viel bef\xfcllt worden."']}),"\n",(0,r.jsx)(n.h3,{id:"21032023",children:"21.03.2023"}),"\n",(0,r.jsx)(n.h4,{id:"aufgabe-abstrakte-klasse-enum",children:"Aufgabe abstrakte Klasse, Enum"}),"\n",(0,r.jsx)(n.mermaid,{value:"classDiagram\n\n  EnergySource --o Phone\n  CablePhone --\x3e Phone\n  SmartPhone --\x3e Phone\n\n  class EnergySource {\n    <<enumeration>>\n    BATTERY('B')\n    POWER_PLUG('P')\n    -type char\n    EnergySource(type: char)\n    +getType() char\n    +canBeUsedEverywhere() boolean\n  }\n\n  class Phone {\n    <<abstract>>\n    #energySource EnergySource &lcub; final &rcub;\n    +Phone(energySource: EnergySource)\n    +readyForUse()* boolean\n  }\n\n  class CablePhone {\n    -pluggedIn boolean\n    -poweredOn boolean\n    +CablePhone(energySource: EnergySource, pluggedIn: boolean, poweredOn: boolean)\n    +readyForUse(): boolean\n  }\n\n  class SmartPhone {\n    -MINIMUM_POWER int$\n    -power int\n    +SmartPhone(energySource: EnergySource, power: int)\n    +readyForUse(): boolean\n  }\n\n  class ExamTask04 {\n    +main(args: String[])$ void\n  }"}),"\n",(0,r.jsx)(n.p,{children:"** Hinweise zur Klasse EnergySource **"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Erstelle die zwei Konstanten Batterie und Steckdose f\xfcr die Arten einer\nEnergiequelle."}),"\n",(0,r.jsx)(n.li,{children:"Der Konstruktor soll alle Attribute initialisieren."}),"\n",(0,r.jsx)(n.li,{children:"Die Methode getType soll den Typ der Energiequelle zur\xfcckgeben."}),"\n",(0,r.jsx)(n.li,{children:"Die Methode canBeUsedEverywhere soll true zur\xfcckgeben, wenn die Energiequelle\neine Batterie ist."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"** Hinweise zur Klasse Phone **"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Der Konstruktor soll alle Attribute initialisieren."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"** Hinweise zur Klasse CablePhone **"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Der Konstruktor soll alle Attribute initialisieren."}),"\n",(0,r.jsx)(n.li,{children:"Die Methode readyForUse soll true zur\xfcckgeben, wenn das Kabeltelefon\neingesteckt und eingeschalten ist."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"** Hinweise zur Klasse SmartPhone **"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Die minimale Energie soll 200 betragen."}),"\n",(0,r.jsx)(n.li,{children:"Der Konstruktor soll alle Attribute initialisieren."}),"\n",(0,r.jsx)(n.li,{children:"Die Methode readyForUse soll true zur\xfcckgeben, wenn die Energie des\nSmartphones die minimal erforderliche Energie \xfcberschreitet."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["** Hinweise zur Klasse ExamTask04 ** ",(0,r.jsx)("br",{})," Erzeuge ein Kabeltelefon mit Akku und\neines, dass an die Steckdose angeschlossen ist. Erzeuge ein leeres Smartphone\nund eines das halb voll ist. Speichere alle erzeugten Fahrzeuge in einer\nArrayList. Ermittle mithilfe einer Schleife die Anzahl der betriebsbereiten\nTelefone. Gib die Anzahl in der Konsole aus."]}),"\n",(0,r.jsx)(n.h4,{id:"aufgabe-comparator",children:"Aufgabe Comparator"}),"\n",(0,r.jsx)(n.mermaid,{value:"classDiagram\n  direction LR\n\n  Comparator~Car~ <.. ConstructionYearComparator\n  CarVendor --  ConstructionYearComparator\n  CarVendor o--  Car\n\n  class Comparator~Car~ {\n    <<interface>>\n    +compare(c1: Car, c2: Car) int\n  }\n\n  class ConstructionYearComparator {\n    +compare(c1: Car, c2: Car) int\n  }\n\n  class CarVendor {\n    -cars ArrayList~Car~\n    +CarVendor()\n    +sortByConstructionYear() void\n    +print() void\n  }\n\n  class Car {\n    <<interface>>\n    +getConstructionYear() int\n  }"}),"\n",(0,r.jsx)(n.p,{children:"** Hinweise zur Klasse CarVendor **"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Der Konstruktor soll alle Attribute initialisieren."}),"\n",(0,r.jsx)(n.li,{children:"Die Methode sortByConstructionYear soll die Autos absteigend nach Baujahr\nsortieren."}),"\n",(0,r.jsx)(n.li,{children:"Die Methode print soll das Baujahr aller Autos in der Konsole ausgeben."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"** Hinweise zur Klasse ConstructionYearComparator **"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Der ConstructionYearComparator soll das Comparator Interface implementieren\nund Autos absteigend nach Baujahr sortieren."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},37226:(e,n,i)=>{i.d(n,{Z:()=>r});const r=i.p+"assets/files/java-cheat-sheet-1564904cc291264239f91a360bcde2f8.pdf"},11151:(e,n,i)=>{i.d(n,{Z:()=>t,a:()=>l});var r=i(67294);const a={},s=r.createContext(a);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);