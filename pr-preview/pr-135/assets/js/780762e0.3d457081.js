"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([[7911],{8440:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>d});var r=i(85893),a=i(11151);const s={title:2024,description:"",sidebar_position:90,tags:[]},l=void 0,t={id:"additional-material/steffen/java-1/exam-preparation/2024",title:"2024",description:"",source:"@site/docs/additional-material/steffen/java-1/exam-preparation/2024.mdx",sourceDirName:"additional-material/steffen/java-1/exam-preparation",slug:"/additional-material/steffen/java-1/exam-preparation/2024",permalink:"/java-docs/pr-preview/pr-135/additional-material/steffen/java-1/exam-preparation/2024",draft:!1,unlisted:!1,editUrl:"https://github.com/jappuccini/java-docs/tree/main/docs/additional-material/steffen/java-1/exam-preparation/2024.mdx",tags:[],version:"current",sidebarPosition:90,frontMatter:{title:"2024",description:"",sidebar_position:90,tags:[]},sidebar:"additionalMaterialSidebar",previous:{title:"Klausurvorbereitung",permalink:"/java-docs/pr-preview/pr-135/additional-material/steffen/java-1/exam-preparation/"},next:{title:"2023",permalink:"/java-docs/pr-preview/pr-135/additional-material/steffen/java-1/exam-preparation/2023"}},o={},d=[{value:"Aufgabe 1",id:"aufgabe-1",level:2},{value:"Hinweise zur Klasse EngineType",id:"hinweise-zur-klasse-enginetype",level:3},{value:"Hinweise zur Klasse Vehicle",id:"hinweise-zur-klasse-vehicle",level:3},{value:"Hinweise zur Klasse Car",id:"hinweise-zur-klasse-car",level:3},{value:"Hinweise zur Klasse Truck",id:"hinweise-zur-klasse-truck",level:3},{value:"Hinweise zur Klasse ExamTask04",id:"hinweise-zur-klasse-examtask04",level:3},{value:"Aufgabe 2",id:"aufgabe-2",level:2},{value:"Hinweise zur Klasse Human",id:"hinweise-zur-klasse-human",level:3},{value:"Hinweise zur Klasse SalaryComparator",id:"hinweise-zur-klasse-salarycomparator",level:3},{value:"Hinweise zur Klasse Company",id:"hinweise-zur-klasse-company",level:3},{value:"Hinweise zur Klasse ExamTask02",id:"hinweise-zur-klasse-examtask02",level:3}];function c(e){const n={h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",p:"p",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"aufgabe-1",children:"Aufgabe 1"}),"\n",(0,r.jsxs)(n.p,{children:["Erstelle die Klassen ",(0,r.jsx)(n.strong,{children:"EngineType"})," (6 Punkte), ",(0,r.jsx)(n.strong,{children:"Vehicle"})," (4 Punkte), ",(0,r.jsx)(n.strong,{children:"Car"}),"\n(3 Punkte), ",(0,r.jsx)(n.strong,{children:"Truck"})," (4 Punkte) und ",(0,r.jsx)(n.strong,{children:"ExamTask01"})," (7 Punkte) anhand des\nabgebildeten Klassendiagramms."]}),"\n",(0,r.jsx)(n.mermaid,{value:"classDiagram\n  EngineType --o Vehicle\n  Car --|> Vehicle : extends\n  Truck --|> Vehicle : extends\n\n  class Vehicle {\n    <<abstract>>\n    -allVehicles: ArrayList~Vehicle~ &lcub; final &rcub; $\n    #engineType: EngineType &lcub; final &rcub;\n\n    Vehicle(engineType: EngineType)\n    +readyForUse() boolean &lcub; abstract &rcub;\n    +getAllVehicles() ArrayList~Vehicle~ $\n  }\n\n  class EngineType {\n    <<enumeration>>\n    ELECTRO = 'E'\n    HYDROGEN = 'H'\n    DIESEL = 'D'\n    PETROL = 'P'\n    -type: char\n\n    EngineType(type: char)\n    +getType() char\n    +canBeSustainable() boolean\n  }\n\n  class Car {\n    -fuelLevel int\n\n    +Car(engineType: EngineType, fuelLevel: int)\n    +readyForUse() boolean\n  }\n\n  class Truck {\n    -MAXIMUM_ALLOWED_WEIGHT int &lcub; final &rcub; = 7500$\n    -weight int\n\n    +Truck(engineType: EngineType, weight: int)\n    +readyForUse() boolean\n  }\n\n  class ExamTask01 {\n    +main(args: String[]) void$\n  }"}),"\n",(0,r.jsx)(n.h3,{id:"hinweise-zur-klasse-enginetype",children:"Hinweise zur Klasse EngineType"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Erstelle die vier Konstanten Elektro, Wasserstoff, Diesel und Benzin f\xfcr die\nArten eines Motors."}),"\n",(0,r.jsx)(n.li,{children:"Der Konstruktor soll alle Attribute initialisieren."}),"\n",(0,r.jsxs)(n.li,{children:["Die Methode ",(0,r.jsx)(n.strong,{children:"getType"})," soll den Typ der Motorart zur\xfcckgeben."]}),"\n",(0,r.jsxs)(n.li,{children:["Die Methode ",(0,r.jsx)(n.strong,{children:"canBeSustainable"})," soll true zur\xfcckgeben, wenn es ein Elektro-\noder Wasserstoffmotor ist."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"hinweise-zur-klasse-vehicle",children:"Hinweise zur Klasse Vehicle"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Der Konstruktor soll engineType initialisieren und das erstellte Vehicle der\nArrayList allVehicles hinzuf\xfcgen."}),"\n",(0,r.jsxs)(n.li,{children:["Die Methode ",(0,r.jsx)(n.strong,{children:"getAllVehicles"})," soll die Liste der erstellten Fahrzeuge\nzur\xfcckgeben."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"hinweise-zur-klasse-car",children:"Hinweise zur Klasse Car"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Der Konstruktor soll alle Attribute initialisieren."}),"\n",(0,r.jsxs)(n.li,{children:["Die Methode ",(0,r.jsx)(n.strong,{children:"readyForUse"})," soll true zur\xfcckgeben, wenn der Tank nicht leer\nist."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"hinweise-zur-klasse-truck",children:"Hinweise zur Klasse Truck"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Der Konstruktor soll alle Attribute initialisieren."}),"\n",(0,r.jsxs)(n.li,{children:["Die Methode ",(0,r.jsx)(n.strong,{children:"readyForUse"})," soll true zur\xfcckgeben, wenn das Gewicht des Trucks\ndas maximal erlaubte Gewicht nicht \xfcberschreitet."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"hinweise-zur-klasse-examtask04",children:"Hinweise zur Klasse ExamTask04"}),"\n",(0,r.jsx)(n.p,{children:"Erzeuge ein Elektroauto mit leerem Akku und ein Benzinauto mit einem Tanklevel\nvon 50. Erzeuge ein Dieseltruck mit einem Gewicht von 6000 und ein\nWasserstofftruck der 1500 wiegt."}),"\n",(0,r.jsx)(n.p,{children:"\xdcberpr\xfcfe alle erzeugten Fahrzeuge mithilfe einer Schleife und ermittle die\nAnzahl der betriebsbereiten Autos. Gib die Anzahl in der Konsole aus."}),"\n",(0,r.jsx)(n.h2,{id:"aufgabe-2",children:"Aufgabe 2"}),"\n",(0,r.jsxs)(n.p,{children:["Erstelle die Klassen ",(0,r.jsx)(n.strong,{children:"Human"})," (8 Punkte), ",(0,r.jsx)(n.strong,{children:"Company"})," (6.5 Punkte),\n",(0,r.jsx)(n.strong,{children:"SalaryComparator"})," (2.5 Punkte), ",(0,r.jsx)(n.strong,{children:"ExamTask02"})," (4 Punkte) anhand des\nabgebildeten Klassendiagramms."]}),"\n",(0,r.jsx)(n.mermaid,{value:"classDiagram\n  Human --o Company\n  Human ..> Comparable~Human~ : implements\n  SalaryComparator ..> Comparator~Human~ : implements\n  SalaryComparator -- Company\n\n  class Human {\n    +firstName: String &lcub; final &rcub;\n    +lastName: String &lcub; final &rcub;\n    +age: int &lcub; final &rcub;\n    +salary: int &lcub; final &rcub;\n\n    +Human(firstName: String, lastName: String, age: int, salary: int)\n    +compareTo(other: Human) int\n    +toString() String\n  }\n\n  class Company {\n    -employees: ArrayList~Human~ &lcub; final &rcub;\n\n    +Company()\n    +addEmployee(human: Human...) void\n    +sortDefault() void\n    +sortBySalary() void\n    +printAllEmployees() void\n  }\n\n  class SalaryComparator {\n    +compare(h1: Human, h2: Human) int\n  }\n\n  class Comparator~Human~ {\n    compare(h1: Human, h2: Human) int\n  }\n\n  class Comparable~Human~ {\n    compareTo(other: Human) int\n  }\n\n  class ExamTask02 {\n    +main(args: String[]) void$\n  }"}),"\n",(0,r.jsx)(n.h3,{id:"hinweise-zur-klasse-human",children:"Hinweise zur Klasse Human"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Der Konstruktor soll alle Attribute initialisieren."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Die Methode ",(0,r.jsx)(n.strong,{children:"compareTo"})," soll die nat\xfcrliche Ordnung der Klasse Human\ndefinieren. Hierbei sollen die Menschen aufsteigend nach ihrem Alter sortiert\nwerden. Sind zwei Menschen gleich alt, sollen die Menschen absteigend nach dem\nGehalt sortiert werden."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Die Methode ",(0,r.jsx)(n.strong,{children:"toString"})," soll die Werte eines Objektes als String zur\xfcckgeben."]}),"\n",(0,r.jsx)(n.p,{children:'Bsp: "Human [Fullname=Steffen Merk] [age=28] [salary=1000]"'}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"hinweise-zur-klasse-salarycomparator",children:"Hinweise zur Klasse SalaryComparator"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Der SalaryComparator soll das Comparator Interface implementieren und Menschen\nabsteigend nach Gehalt sortieren."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"hinweise-zur-klasse-company",children:"Hinweise zur Klasse Company"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Der Konstruktor soll alle Attribute initialisieren."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Die Methode ",(0,r.jsx)(n.strong,{children:"addEmployee"})," soll alle eingehenden Menschen der\nMitarbeiterliste hinzuf\xfcgen."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Die Methode ",(0,r.jsx)(n.strong,{children:"sortDefault"})," soll die Mitarbeiterliste der nat\xfcrlichen Ordnung\nnach sortieren."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Die Methode ",(0,r.jsx)(n.strong,{children:"sortBySalary"})," soll die Mitarbeiterliste absteigend nach Gehalt\nsortieren."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Die Methode ",(0,r.jsx)(n.strong,{children:"printAllEmployees"})," soll jeden Mitarbeiter in der Konsole\nausgeben."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"hinweise-zur-klasse-examtask02",children:"Hinweise zur Klasse ExamTask02"}),"\n",(0,r.jsx)(n.p,{children:"Erzeuge eine Firma und f\xfcge dieser 2 Mitarbeiter hinzu. Der erste Mitarbeiter\nhei\xdft Steffen Merk, ist 24 Jahre alt und hat ein Gehalt von 1000. Die zweite\nMitarbeiterin hei\xdft Marianna, ist 28 Jahre alt und hat ein Gehalt von 2000."}),"\n",(0,r.jsx)(n.p,{children:"Sortiere die Mitarbeiter zuerst nach dem Gehalt und anschlie\xdfend nach der\nnat\xfcrlichen Ordnung. Gebe nach jeder Sortierung alle Mitarbeiter der Firma aus."})]})}function u(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>t,a:()=>l});var r=i(67294);const a={},s=r.createContext(a);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);