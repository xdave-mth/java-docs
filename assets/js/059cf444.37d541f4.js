"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([[745],{47098:(e,n,s)=>{s.d(n,{Z:()=>r});var a=s(67294),l=s(85893);function r(e){let{children:n,initSlides:s,width:r=null,height:i=null}=e;return(0,a.useEffect)((()=>{s()})),(0,l.jsx)("div",{className:"reveal reveal-viewport",style:{width:r??"100vw",height:i??"100vh"},children:(0,l.jsx)("div",{className:"slides",children:n})})}},63942:(e,n,s)=>{s.d(n,{O:()=>a});const a=()=>{const e=s(42199),n=s(87251),a=s(60977),l=s(12489);new(s(29197))({plugins:[e,n,a,l]}).initialize({hash:!0})}},69865:(e,n,s)=>{s.r(n),s.d(n,{default:()=>i});var a=s(47098),l=s(63942),r=s(85893);function i(){return(0,r.jsxs)(a.Z,{initSlides:l.O,children:[(0,r.jsx)("section",{children:(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Agenda"}),(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{className:"fragment",children:"Generics"}),(0,r.jsx)("li",{className:"fragment",children:"Optionals"})]})]})}),(0,r.jsxs)("section",{children:[(0,r.jsx)("section",{children:(0,r.jsx)("h2",{children:"Generics"})}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Generische Typen"}),(0,r.jsx)("p",{className:"fragment",children:"In Java k\xf6nnen Klassen und Interfaces generisch sein."}),(0,r.jsx)("p",{className:"fragment",children:"Generisch hei\xdft, dass Funktionalit\xe4t unabh\xe4ngig von einem Typ implementiert werden k\xf6nnen."})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Beispiele Generische Klassen/Interfaces"}),(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{className:"fragment",children:"ArrayList"}),(0,r.jsx)("li",{className:"fragment",children:"Comparator"}),(0,r.jsx)("li",{className:"fragment",children:"Comparable"})]}),(0,r.jsx)("p",{className:"fragment",children:"Alle Klassen stellen immer die gleiche Funktionalit\xe4t bereit, egal welchen Typ wir verwenden."})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Beispiele ArrayList"}),(0,r.jsx)("p",{className:"fragment",children:"Egal ob wir Objekte vom Typ Human, Dog, String oder Integer in einer ArrayList abspeichern, wir haben immer die gleichen Methoden zur verf\xfcgung."}),(0,r.jsx)("p",{className:"fragment",children:"add, remove, size etc."})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Beispiel Comparator"}),(0,r.jsx)("p",{className:"fragment",children:"Egal ob wir Comparator oder Comparable Klassen vom Typ Human, Dog, String oder Integer erstellen, wir haben immer die gleichen Methoden zur verf\xfcgung."}),(0,r.jsx)("p",{className:"fragment",children:"Collections.sort"})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Verwendung Generics I"}),(0,r.jsxs)("p",{className:"fragment",children:["Will man in seiner Anwendung eine Liste von Menschen abspeichern ist der ",(0,r.jsx)("b",{children:"spezifische"})," Typ bekannt."]}),(0,r.jsxs)("p",{className:"fragment",children:["Nach dem Klassennamen wird innerhalb von spitzen Klammern, der"," ",(0,r.jsx)("b",{children:"spezifische"})," Typ angegeben."]})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Verwendung Generics II"}),(0,r.jsx)("pre",{className:"fragment",children:(0,r.jsx)("code",{"data-line-numbers":"3|6",className:"java",dangerouslySetInnerHTML:{__html:"public class Main {\n  public static void main(String[] args) {\n    ArrayList&lt;Human&gt; humans = new ArrayList&lt;&gt;();\n  }\n}\npublic class HumanComp implements Comparator&lt;Human&gt; {\n  public int compare(Human h1, Human h2) {\n    // implementation details\n  }\n}\n"}})})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Implementierung Generics I"}),(0,r.jsx)("p",{className:"fragment",children:"Um eine generische Klasse zu erstellen, wird nach dem Klassennamen in spitzen Klammern der Typparameter angegeben."}),(0,r.jsx)("pre",{className:"fragment",children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Team&lt;T&gt; {\n  // implementierung der Klasse\n}\n"}})})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Typparameter I"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Team&lt;T&gt; {\n  // implementierung der Klasse\n}\n"}})}),(0,r.jsx)("pre",{className:"fragment",children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Team&lt;A&gt; {\n  // implementierung der Klasse\n}\n"}})}),(0,r.jsx)("pre",{className:"fragment",children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Team&lt;HANS&gt; {\n  // implementierung der Klasse\n}\n"}})}),(0,r.jsx)("pre",{className:"fragment",children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Team&lt;BLIBLABLUBB&gt; {\n  // implementierung der Klasse\n}\n"}})}),(0,r.jsx)("p",{className:"fragment",children:"Der Bezeichner des Typparameters kann frei gew\xe4hlt werden."})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Typparameter II"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Team&lt;T&gt; {\n  // implementierung der Klasse\n}\n"}})}),(0,r.jsx)("pre",{className:"fragment",children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Team&lt;T,U&gt; {\n  // implementierung der Klasse\n}\n"}})}),(0,r.jsx)("pre",{className:"fragment",children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Team&lt;T, U, V&gt; {\n  // implementierung der Klasse\n}\n"}})}),(0,r.jsx)("p",{className:"fragment",children:"Es k\xf6nnen mehrere Typparameter kommagetrennt angegeben werden."})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Verwenden von Typparameter I"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{"data-line-numbers":"1-15|1|3,12",className:"java",dangerouslySetInnerHTML:{__html:"public class Team&lt;T&gt; {\n  private String teamName;\n  private ArrayList&lt;T&gt; teamMembers = new ArrayList&lt;&gt;();\n  public Team(String teamName) {\n    this.teamName = teamName;\n  }\n  \n  public String getTeamName() {\n    return this.teamName;\n  }\n  \n  public void addMember(T member) {\n    this.teamMembers.add(member);\n  }\n}\n"}})})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Verwenden von Typargumenten"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{"data-line-numbers":"1-10|3|4|6-7|8",className:"java",dangerouslySetInnerHTML:{__html:'public class Main {\n  public static void main(String[] args) {\n    Team&lt;FootballPlayer&gt; scf = new Team&lt;&gt;("SC Freiburg");\n    Team&lt;HockeyPlayer&gt; wildwings  = new Team&lt;&gt;("Wildwings");\n    \n    scf.addMember(new FootballPlayer("Steffen");\n    scf.addMember(new HockeyPlayer("Mirco"); // fails\n    wildwings.addMember(new HockeyPlayer("Mirco");\n }\n}\n'}})})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Unterschied Parameter und Argument"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{"data-line-numbers":"1-8|2|6",className:"java",dangerouslySetInnerHTML:{__html:"public class Main {\n  public static int add(int a, int b) { // Parameter\n    return a + b;\n  }\n  public static void main(String[] args) {\n    int result = Main.add(1, 2); // Argumente\n  }\n}\n"}})})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Unterschied Typparameter und Typargument"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{"data-line-numbers":"1-6|1|2|5",className:"java",dangerouslySetInnerHTML:{__html:"public class Team&lt;T&gt; { // Typparameter\n  public ArrayList&lt;T&gt; members; // Typargument\n}\n//...\nTeam&lt;Human&gt; humanTeam = new Team&lt;&gt;();// Typargument\n//...\n"}})})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Demo"}),(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{className:"fragment",children:"spezifisches Football- und Hockeyteam"}),(0,r.jsx)("li",{className:"fragment",children:"Generische Team Klasse"}),(0,r.jsx)("li",{className:"fragment",children:"Spieler eines Teams ausgeben"})]})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Einschr\xe4nken von Typparametern I"}),(0,r.jsx)("p",{children:"Um noch mehr Funktionalit\xe4ten in eine generische Klasse auszulagern ist es notwendig den Typ einzuschr\xe4nken."})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Einschr\xe4nken von Typparametern II"}),(0,r.jsxs)("p",{children:["Mit ",(0,r.jsx)("b",{children:"extends"})," und ",(0,r.jsx)("b",{children:"super"})," k\xf6nnen die m\xf6glichen Typen eingeschr\xe4nkt werden."]})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Einschr\xe4nken von Typparametern III"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Team&lt;T extends Player&gt; {\n  // Player und Subtypen von Player erlaubt\n}\n"}})}),(0,r.jsx)("pre",{className:"fragment",children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Team&lt;T super Player&gt; {\n  // Player und Supertypen von Player erlaubt \n}\n"}})})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Einschr\xe4nken von Typplatzhaltern IV"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Player {}\npublic class BaseballPlayer extends Player {}\npublic class FootballPlayer extends Player {}\npublic class ExtremeFootballPlayer extends FootballPlayer {}\n"}})}),(0,r.jsx)("pre",{className:"fragment",children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Team&lt;T extends Player&gt; {} //PBFE erlaubt\npublic class Team&lt;T extends FootballPlayer&gt; {} //FE erlaubt\npublic class Team&lt;T super Player&gt; {} // P erlaubt\npublic class Team&lt;T super FootballPlayer&gt; {} //PF erlaubt"}})})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Demo"}),(0,r.jsx)("ul",{children:(0,r.jsx)("li",{className:"fragment",children:"Spieler eines Generischen Teams ausgeben"})})]})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("section",{children:(0,r.jsx)("h2",{children:"Optionals"})}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Optional - Klasse"}),(0,r.jsx)("p",{className:"fragment",children:"Mit Hilfe der Optional Klasse kann man NullPointerExceptions einfach behandeln."}),(0,r.jsx)("p",{className:"fragment",children:"Was sind NullPointerExceptions?"})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Null Pointer Exception I"}),(0,r.jsx)("pre",{className:"fragment",children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Dog {\n public String name;\n public Dog(String name) {\n  this.name = name;\n }\n}\n"}})})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Null Pointer Exception II"}),(0,r.jsx)("pre",{className:"fragment",children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:'public class Main {\n  public static void main(String[] args) {\n    Dog doggo = new Dog(null);\n    doggo.name.equals("Bello"); // funktioniert nicht\n }\n}\n'}})})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Optional als L\xf6sung"}),(0,r.jsx)("pre",{className:"fragment",children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:"public class Dog {\n public Optional&lt;String&gt; name;\n public Dog(String name) {\n  this.name = Optional.ofNullable(name);\n }\n}\n"}})})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Optional - Wrapper um den echten Wert"}),(0,r.jsx)("p",{className:"fragment",children:"Die Optional Klasse verpackt den echten Wert hinter Methoden."}),(0,r.jsx)("p",{className:"fragment",children:"Mithilfe von Methoden kann \xfcberpr\xfcft werden, ob ein Wert Null ist oder nicht."})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Optional - Methoden I"}),(0,r.jsx)("pre",{className:"fragment",children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:'public class Main {\n  public static void main(String[] args) {\n    Optional&lt;String&gt; name = Name.createName();\n    if(name.isPresent()) {\n      System.out.println(name.get());\n    }\n    if(name.isEmpty()) {\n      System.out.println("No Name");\n    }\n }\n}\n'}})})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Optional - Methoden II"}),(0,r.jsx)("pre",{className:"fragment",children:(0,r.jsx)("code",{className:"java",dangerouslySetInnerHTML:{__html:'public class Main {\n  public static void main(String[] args) {\n    Optional&lt;String&gt; name = Name.createName();\n    name.ifPresent((value) -> System.out.println(value));\n    name.ifPresentOrElse(\n      (value) -> System.out.println(value),\n      () -> System.out.println("No Name")\n    );\n  }\n}\n'}})})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h2",{children:"Demo"}),(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{className:"fragment",children:"Human Middlename"}),(0,r.jsx)("li",{className:"fragment",children:"University Search Student"})]})]})]})]})}}}]);